{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished'
]
%}
{% block paragraph %}
  {% if content.field_titolo %}
  <div class="it-header-block">
    <div class="it-header-block-title">
      <h4>{{ content.field_titolo }}</h4>
    </div>
  </div>
  {% endif %}
  <div class="splide__track" id="splide01-track" style="padding-left: 0px; padding-right: 0px;">
    <ul class="splide__list it-carousel-all" id="splide01-list" style="transform: translateX(-269px);">
    {% block content %}
      {% for card in content.field_cards_gallery['#items'] %}
      <li class="splide__slide" id="splide01-slide{{ loop.index1|strpad(2,'0')  }}" tabindex="0"
        style="margin-right: 24px; width: calc(((100% + 24px) / 3) - 24px);" data-focus-mouse="false"
      >
        <div class="it-single-slide-wrapper">
          <figure>
            <img src="{{file_url(card.entity.field_immagine.entity.field_media_image.entity.fileuri) }}"
              alt="{{ card.entity.field_immagine.entity.field_media_image.alt }}" class="img-fluid"
            >
            {% if card.entity.field_label is not empty %}
            <figcaption class="figure-caption mt-2">{{ card.entity.field_label[0].value|check_markup(card.entity.field_label[0].format) }}</figcaption>
            {% endif %}
          </figure>
        </div>
      </li>
      {% endfor %}
    {% endblock %}
    </ul>
  </div>
{% endblock paragraph %}
