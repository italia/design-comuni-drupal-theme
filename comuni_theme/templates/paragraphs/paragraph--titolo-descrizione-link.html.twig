{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 * 
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}

{# se l'oggetto è singolo ho accesso diretto ai campi direttamente da content, se ho oggetti multipli vengono automaticamente ciclati in questo twig #}

{% set viewMode = paragraph.getParentEntity().field_tipo_di_visualizzazione.value %}
{% set titolo = attribute(content.field_titolo, "#items").value %}
{% set descrizione = attribute(content.field_descrizione, "#items").value %}
{% set url = attribute(content.field_link.0, "#url") %}
{% set urlTitle = attribute(content.field_link, "#items").title %}
{% set urlUri = attribute(content.field_link, "#items").uri %}
{% if url.external != 1 %}
    {% set urlUri = urlUri | replace({'entity:':'/'}) %}
{% endif %}
{% if viewMode != "card_estese" %}
  {% if i == 0 %}
    <li class="mb-3 mt-3">
    <a class="list-item ps-0 title-medium underline" href="{{ urlUri }}">
      <span>{{ titolo }}</span>
    </a>
  </li>
  {% else %}
  <li class="mb-3">
    <a class="list-item ps-0 title-medium underline" href="{{ urlUri }}">
      <span>{{ titolo }}</span>
    </a>
  </li>
  {% endif %}
{% else %}
  <div class="col-12 col-lg-4">
    <div class="cmp-card-simple card-wrapper pb-0">
      <div class="card shadow rounded">
        <div class="card-body">
          <h3 class="card-title t-primary title-xlarge">{{ titolo }}</h3>
          <p class="titillium text-paragraph mb-4">{{ descrizione }}</p>
          <a class="read-more mt-4" href="{{ urlUri }}">
            <span class="text text-button-semi">{{ urlTitle }}</span>
            <span class="visually-hidden">su Lorem ipsum dolor sit amet, consectetur adipiscing elit…</span>
          </a>
        </div>
      </div>
    </div>
  </div>
{% endif %}