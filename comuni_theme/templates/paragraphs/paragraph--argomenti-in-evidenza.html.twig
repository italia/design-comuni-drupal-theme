{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set classes = [
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
  not paragraph.isPublished() ? 'paragraph--unpublished',
  'section  py-5'
] %}
{% block paragraph %}
	{# <div{{ attributes.addClass(classes) }}> #}
	{% block content %}
    <div class="container" id="main-container">
      <h2 class="title-xxlarge mt-70 mb-4 mt-lg-40 pt-lg-2 mb-lg-40">{{ content.field_titolo }}</h2>
      <div class="row">
      {% for item in attribute(content.field_argomenti, "#items") %}
        <div class="col-sm-6 col-lg-4 mb-4">
          <div class="it-grid-item-wrapper it-grid-item-overlay">
            <a href="{{ path(
                'entity.taxonomy_term.canonical',
                {'taxonomy_term': item.target_id}
              ) }}"
            >
              <div class="img-responsive-wrapper">
                <div class="img-responsive rounded">
                  <div class="img-wrapper">
                  {% set media_image = item.entity.field_immagine.entity.field_media_image %}
                  {% if media_image is defined and media_image is not null %}
                    <img src="{{ file_url(media_image.entity.fileuri) }}"
                      alt="{{ media_image.alt }}" title="{{ media_image.title }}"
                    >
                  {% else %}
                    <div class="drupal--grey-block"></div>
                  {% endif %}
                  </div>
                </div>
              </div>
              <div class="it-griditem-text-wrapper">
                <h3>{{ item.entity.name.value }}</h3>
              </div>
            </a>
          </div>
        </div>
      {% endfor %}
      </div>
    </div>
	{% endblock %}
	{# </div> #}
{% endblock paragraph %}
